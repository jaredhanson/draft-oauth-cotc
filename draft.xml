<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY rfc2119 SYSTEM 'bibxml/reference.RFC.2119.xml'>      
<!ENTITY rfc4287 SYSTEM 'bibxml/reference.RFC.4287.xml'>      
<!ENTITY xmlns SYSTEM 'bibxml/reference.W3C.REC-xml-names-19990114.xml'>      
<!ENTITY rdfsg SYSTEM 'bibxml/reference.W3C.WD-rdf-syntax-grammar-20031010.xml'>      
]>
<rfc docName="draft-hanson-oauth-cotc-latest">
  <front>
    <title>OAuth 2.0 Cross-Origin Token Confirmation</title>
    <author initials="J." surname="Hanson" fullname="Jared Hanson">
      <organization>Auth0 Inc.</organization>
      <address>       
        <email>jaredhanson@gmail.com</email> 
        <uri>http://www.jaredhanson.net/</uri>       
      </address>
    </author>
    <date/>
    <abstract>
      <t>
        This specification describes how to declare in a JWT that the presenter
        of a JWT is a User Agent through which a verifier can be obtained.  It
        further specifies how the reciever can obtain the verifier and confirm
        that the User Agent is authorized to present the security token.
        Confirmation in this manner protects these tokens from token export
        attacks.
      </t>
    </abstract>
  </front>
  <middle>
  
    <section title="Introduction">
      <t>
        This specification describes how to declare in a JWT that the presenter
        of a JWT is a User Agent through which a verifier can be obtained.  It
        further specifies how the reciever can obtain the verifier and confirm
        that the User Agent is authorized to present the security token.
        Confirmation in this manner protects these tokens from token export
        attacks.
      </t>
      <t>
        Token confirmation improves security in federated scenarios, and in
        particular federated scenarios that start at the Identity Provider.  In
        an IdP-initiated Federated Sign-On protocol, an Identity Provider issues
        an identity token to a User Agent, which sends the identity token to a
        Relying Party to authenticate itself.  Examples of this include OpenID
        Connect (where the identity token is called "ID Token") and SAML (where
        the identity token is a SAML assertion).
      </t>
      <t>
        In such an IdP-initiated flow, the identity token is a bearer token and
        can be used by any User Agent in posession of the token.  Bearer tokens
        can be exported from the User Agent and replayed in a different User
        Agent, leaving such flows vulnerable to cross-site request forgery.
      </t>
      <t>
        This specification allows the issuer of a security token to indicate
        that a verifier is obtainable via the User Agent to which the token was
        issued.  The Relying Party can confirm this verifier via the User Agent,
        thereby protecting against token export attacks.
      </t>
    </section>
    
    <section title="Cross-Origin Token Confirmation Representation">
      <t>
        This specification defines the new JWT Confirmation Method <xref target="RFC7800"/>
        member cov (cross-origin verifier) and coi (cross-origin verifier ID).
        The value of the cov member is the verifier that MUST be obtained via
        the User Agent for the token to be confirmed.  The value of the coi
        member is an identifer for the verifier, and allows identification of a
        specific verifier in scenarios where multiple verifiers are in use.
      </t>
      <figure>
        <preamble>
          The following example demonstrates the JWT Claims Set of an ID Token
          containing a verifier as the value of the cov (cross-origin verifier)
          element in the cnf (confirmation) claim:
        </preamble>
        <artwork><![CDATA[
{
  "iss": "https://server.example.com",
  "sub": "0f6LkoE3KsPyxQ",
  "aud": "0d8f597e-bc45-46b2-97cf-043c88aa5ecc",
  "iat": 1467151051,
  "exp": 1467151651,
  "nonce": "1KjVsFnQRd4V2XC6",
  "cnf":{
    "cov": "0zWb6JxHJS0eho6zKa8Kcg",
    "coi": "53cc28d9-10b0-4e47-b802-6b40fe93adad"
  }
}
]]></artwork>
      </figure>
    </section>
    
    <section title="Token Confirmation Protocol">
      <t>
        The goal of cross-origin token confirmation is to confirm that the
        User Agent presenting the security token is the same User Agent to which
        the security token was issued.  Upon receiving a security token, the
        Relying Party (called the Token Consumer in this document) obtains the
        verifier from the Identity Provider (called the Token Provider in this
        document) via the User Agent using HTML5 Web Messaging.  The Token
        Consumer then confirms that the verifier matches that in the security
        token.  If so, the token was issued by the Token Provider to the
        presenting User Agent.
      </t>
      <t>
        The sequence of events is as follows:
        
        <list style="symbols">
          <t>
            The Token Provider issues a security token to the User Agent.
          </t>
          <t>
            The User Agent presents the security token to the Token Consumer.
          </t>
          <t>
            The Token Consumer renders a page an invisible iframe from the
            Token Provider's cross-origin verification iframe endpoint.
          </t>
          <t>
            The page rendered by the Token Consumer posts a message to the
            Token Provider's cross-origin verification iframe requesting
            the verifier.
          </t>
          <t>
            The Token Provider's cross-origin verification iframe posts a
            message to the Token Consumer page which contains the verifier.
          </t>
          <t>
            The Token Consumer submits the verifier to its confirmation endpoint.
          </t>
          <t>
            The Token Consumer confirms the verifier, and if confirmed continues
            processing the operation requested using the security token.
          </t>
        </list>
      </t>
      
      <section title="Verifier Request">
        <t>
          The Token Consumer requests the verifier by embedding the Token
          Provider's cross-origin verification iframe into a page, so that it
          can run in the Token Provider's security context.
        </t>
        <figure>
          <preamble>
            Following is non-normative example code for the Token Consumer page:
          </preamble>
          <artwork><![CDATA[
var iframeURL = 'https://server.example.com/co/verify#origin=https://client.example.org';
var targetOrigin = 'https://server.example.com';
var id = '53cc28d9-10b0-4e47-b802-6b40fe93adad';
          
window.addEventListener('message', function(evt) {
  switch (evt.data.type) {
  case 'ready':
    evt.source.postMessage({ type: 'co_verifier_request', request: { id: id } }, targetOrigin);
    break;

  case 'co_verifier_response':
    if (evt.data.response && evt.data.response.verifier) {
      var node = document.createElement('input');
      node.setAttribute('type', 'hidden');
      node.setAttribute('name', 'verifier');
      node.setAttribute('value', evt.data.response.verifier);
      document.forms[0].appendChild(node);
    }
    document.forms[0].submit();
    break;
  }
});

node = document.createElement('iframe');
node.setAttribute('src', iframeURL);
document.body.appendChild(node);
]]></artwork>
        </figure>
      </section>
      
      <section title="Verifier Response">
        <t>
          The Token Provider responds with the verifier.
        </t>
        <figure>
          <preamble>
            Following is non-normative example code for the Token Provider
            cross-origin verification iframe:
          </preamble>
          <artwork><![CDATA[
function getFragment(name) {
  var value = "&" + window.location.hash.substring(1);
  var parts = value.split("&" + name + "=");
  if (parts.length == 2) return parts.pop().split("&").shift();
}

var targetOrigin = decodeURIComponent(getFragment('origin'));

window.addEventListener('message', function(evt) {
  switch (evt.data.type) {
  case 'co_verifier_request':
    var key = [ 'co/verifier',
      encodeURIComponent(evt.origin),
      encodeURIComponent(evt.data.request.id)
    ].join('/');
    var verifier = sessionStorage.getItem(key);
    sessionStorage.removeItem(key)
    
    event.source.postMessage({
      type: 'co_verifier_response',
      response: {
        verifier: verifier
      }
    }, evt.origin);
    break;
  }
});

window.parent.postMessage({ type: 'ready' }, targetOrigin);
]]></artwork>
        </figure>
      </section>
      
    </section>
    
  </middle>
  <back>
    <references title="Normative References">
      <?rfc include="reference.RFC.2119"?>
      <?rfc include="reference.RFC.4627"?>
      <?rfc include="reference.RFC.6749"?>
      <?rfc include="reference.RFC.7800"?>
      <?rfc include='http://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.draft-ietf-oauth-discovery-05.xml'?>
    </references>
  </back>
</rfc>
