



Network Working Group                                          J. Hanson
Internet-Draft                                                Auth0 Inc.
Expires: October 27, 2017                                 April 25, 2017


               OAuth 2.0 Cross-Origin Token Confirmation
                     draft-hanson-oauth-cotc-latest

Abstract

   This specification describes how to declare in a JWT that the
   presenter of a JWT is a User Agent through which a verifier can be
   obtained.  It further specifies how the reciever can obtain the
   verifier and confirm that the User Agent is authorized to present the
   security token.  Confirmation in this manner protects these tokens
   from token export attacks.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on October 27, 2017.

Copyright Notice

   Copyright (c) 2017 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.



Hanson                  Expires October 27, 2017                [Page 1]

Internet-Draft  OAuth 2.0 Cross-Origin Token Confirmation     April 2017


1.  Introduction

   This specification describes how to declare in a JWT that the
   presenter of a JWT is a User Agent through which a verifier can be
   obtained.  It further specifies how the reciever can obtain the
   verifier and confirm that the User Agent is authorized to present the
   security token.  Confirmation in this manner protects these tokens
   from token export attacks.

   Token confirmation improves security in federated scenarios, and in
   particular federated scenarios that start at the Identity Provider.
   In an IdP-initiated Federated Sign-On protocol, an Identity Provider
   issues an identity token to a User Agent, which sends the identity
   token to a Relying Party to authenticate itself.  Examples of this
   include OpenID Connect (where the identity token is called "ID
   Token") and SAML (where the identity token is a SAML assertion).

   In such an IdP-initiated flow, the identity token is a bearer token
   and can be used by any User Agent in posession of the token.  Bearer
   tokens can be exported from the User Agent and replayed in a
   different User Agent, leaving such flows vulnerable to cross-site
   request forgery.

   This specification allows the issuer of a security token to indicate
   that a verifier is obtainable via the User Agent to which the token
   was issued.  The Relying Party can confirm this verifier via the User
   Agent, thereby protecting against token export attacks.

2.  Cross-Origin Token Confirmation Representation

   This specification defines the new JWT Confirmation Method [RFC7800]
   member cov (cross-origin verifier) and coi (cross-origin verifier
   ID).  The value of the cov member is the verifier that MUST be
   obtained via the User Agent for the token to be confirmed.  The value
   of the coi member is an identifer for the verifier, and allows
   identification of a specific verifier in scenarios where multiple
   verifiers are in use.














Hanson                  Expires October 27, 2017                [Page 2]

Internet-Draft  OAuth 2.0 Cross-Origin Token Confirmation     April 2017


   The following example demonstrates the JWT Claims Set of an ID Token
   containing a verifier as the value of the cov (cross-origin verifier)
   element in the cnf (confirmation) claim:

   {
     "iss": "https://server.example.com",
     "sub": "0f6LkoE3KsPyxQ",
     "aud": "0d8f597e-bc45-46b2-97cf-043c88aa5ecc",
     "iat": 1467151051,
     "exp": 1467151651,
     "nonce": "1KjVsFnQRd4V2XC6",
     "cnf":{
       "cov": "0zWb6JxHJS0eho6zKa8Kcg",
       "coi": "53cc28d9-10b0-4e47-b802-6b40fe93adad"
     }
   }

3.  Token Confirmation Protocol

   The goal of cross-origin token confirmation is to confirm that the
   User Agent presenting the security token is the same User Agent to
   which the security token was issued.  Upon receiving a security
   token, the Relying Party (called the Token Consumer in this document)
   obtains the verifier from the Identity Provider (called the Token
   Provider in this document) via the User Agent using HTML5 Web
   Messaging.  The Token Consumer then confirms that the verifier
   matches that in the security token.  If so, the token was issued by
   the Token Provider to the presenting User Agent.

   The sequence of events is as follows:

   o  The Token Provider issues a security token to the User Agent.

   o  The User Agent presents the security token to the Token Consumer.

   o  The Token Consumer renders a page an invisible iframe from the
      Token Provider's cross-origin verification iframe endpoint.

   o  The page rendered by the Token Consumer posts a message to the
      Token Provider's cross-origin verification iframe requesting the
      verifier.

   o  The Token Provider's cross-origin verification iframe posts a
      message to the Token Consumer page which contains the verifier.

   o  The Token Consumer submits the verifier to its confirmation
      endpoint.




Hanson                  Expires October 27, 2017                [Page 3]

Internet-Draft  OAuth 2.0 Cross-Origin Token Confirmation     April 2017


   o  The Token Consumer confirms the verifier, and if confirmed
      continues processing the operation requested using the security
      token.

3.1.  Verifier Request

   The Token Consumer requests the verifier by embedding the Token
   Provider's cross-origin verification iframe into a page, so that it
   can run in the Token Provider's security context.

   Following is non-normative example code for the Token Consumer page:

var iframeURL = 'https://server.example.com/co/verify#origin=https://client.example.org';
var targetOrigin = 'https://server.example.com';
var id = '53cc28d9-10b0-4e47-b802-6b40fe93adad';

window.addEventListener('message', function(evt) {
  switch (evt.data.type) {
  case 'ready':
    evt.source.postMessage({ type: 'co_verifier_request', request: { id: id } }, targetOrigin);
    break;

  case 'co_verifier_response':
    if (evt.data.response && evt.data.response.verifier) {
      var node = document.createElement('input');
      node.setAttribute('type', 'hidden');
      node.setAttribute('name', 'verifier');
      node.setAttribute('value', evt.data.response.verifier);
      document.forms[0].appendChild(node);
    }
    document.forms[0].submit();
    break;
  }
});

node = document.createElement('iframe');
node.setAttribute('src', iframeURL);
document.body.appendChild(node);

3.2.  Verifier Response

   The Token Provider responds with the verifier.









Hanson                  Expires October 27, 2017                [Page 4]

Internet-Draft  OAuth 2.0 Cross-Origin Token Confirmation     April 2017


   Following is non-normative example code for the Token Provider cross-
   origin verification iframe:

   function getFragment(name) {
     var value = "&" + window.location.hash.substring(1);
     var parts = value.split("&" + name + "=");
     if (parts.length == 2) return parts.pop().split("&").shift();
   }

   var targetOrigin = decodeURIComponent(getFragment('origin'));

   window.addEventListener('message', function(evt) {
     switch (evt.data.type) {
     case 'co_verifier_request':
       var key = [ 'co/verifier',
         encodeURIComponent(evt.origin),
         encodeURIComponent(evt.data.request.id)
       ].join('/');
       var verifier = sessionStorage.getItem(key);
       sessionStorage.removeItem(key)

       event.source.postMessage({
         type: 'co_verifier_response',
         response: {
           verifier: verifier
         }
       }, evt.origin);
       break;
     }
   });

   window.parent.postMessage({ type: 'ready' }, targetOrigin);

4.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <http://www.rfc-editor.org/info/rfc2119>.

   [RFC4627]  Crockford, D., "The application/json Media Type for
              JavaScript Object Notation (JSON)", RFC 4627,
              DOI 10.17487/RFC4627, July 2006,
              <http://www.rfc-editor.org/info/rfc4627>.

   [RFC6749]  Hardt, D., Ed., "The OAuth 2.0 Authorization Framework",
              RFC 6749, DOI 10.17487/RFC6749, October 2012,
              <http://www.rfc-editor.org/info/rfc6749>.



Hanson                  Expires October 27, 2017                [Page 5]

Internet-Draft  OAuth 2.0 Cross-Origin Token Confirmation     April 2017


   [RFC7800]  Jones, M., Bradley, J., and H. Tschofenig, "Proof-of-
              Possession Key Semantics for JSON Web Tokens (JWTs)",
              RFC 7800, DOI 10.17487/RFC7800, April 2016,
              <http://www.rfc-editor.org/info/rfc7800>.

   [I-D.ietf-oauth-discovery]
              Jones, M., Sakimura, N., and J. Bradley, "OAuth 2.0
              Authorization Server Metadata", draft-ietf-oauth-
              discovery-05 (work in progress), January 2017.

Author's Address

   Jared Hanson
   Auth0 Inc.

   Email: jaredhanson@gmail.com
   URI:   http://www.jaredhanson.net/


































Hanson                  Expires October 27, 2017                [Page 6]
